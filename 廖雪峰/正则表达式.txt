正则表达式
1 要匹配变长的字符，在正则表达式中，用*表示任意个字符（包括0个），用+表示至少一个字符，用?表示0个或1个字符，用{n}表示n个字符，用{n,m}表示n-m个字符
2 如果要匹配'010-12345'这样的号码呢？由于'-'是特殊字符，在正则表达式中，要用'\'转义，所以，上面的正则是\d{3}\-\d{3,8}
3 但是，仍然无法匹配'010 - 12345'，因为带有空格。所以我们需要更复杂的匹配方式
4 [0-9a-zA-Z\_]可以匹配一个数字、字母或者下划线
5 [0-9a-zA-Z\_]+可以匹配至少由一个数字、字母或者下划线组成的字符串，比如'a100'，'0_Z'，'Py3000'等等
6 [0-9a-zA-Z\_]+可以匹配至少由一个数字、字母或者下划线组成的字符串，比如'a100'，'0_Z'，'Py3000'等等
7 [a-zA-Z\_][0-9a-zA-Z\_]{0, 19}更精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符）
8 A|B可以匹配A或B，所以(P|p)ython可以匹配'Python'或者'python'
9 ^表示行的开头，^\d表示必须以数字开头
10 $表示行的结束，\d$表示必须以数字结束
11 由于Python的字符串本身也用\转义，所以要特别注意：
12 因此我们强烈建议使用Python的r前缀，就不用考虑转义的问题了
13 match()方法判断是否匹配，如果匹配成功，返回一个Match对象，否则返回None
14 如果用户输入了一组标签，下次记得用正则表达式来把不规范的输入转化成正确的数组
15 re.split(r'[\s\,\;]+','a,b,;;c,d')
分组
16 除了简单地判断是否匹配之外，正则表达式还有提取子串的强大功能。用()表示的就是要提取的分组（Group）
17 如果正则表达式中定义了组，就可以在Match对象上用group()方法提取出子串来;注意到group(0)永远是原始字符串，group(1)、group(2)……表示第1、2、……个子串
贪婪匹配
1  re.match(r'^(\d+)(0*)$', '102300').groups()：（由于\d+采用贪婪匹配，直接把后面的0全部匹配了，结果0*只能匹配空字符串了。） re.match(r'^(\d+?)(0*)$', '102300').groups()：（必须让\d+采用非贪婪匹配（也就是尽可能少匹配），才能把后面的0匹配出来，加个?就可以让\d+采用非贪婪匹配）
编译：
1 当我们在Python中使用正则表达式时，re模块内部会干两件事情：
	1.1 编译正则表达式，如果正则表达式的字符串本身不合法，会报错；
	1.2 用编译后的正则表达式去匹配字符串
2 如果一个正则表达式要重复使用几千次，出于效率的考虑，我们可以预编译该正则表达式，接下来重复使用时就不需要编译这个步骤了，直接匹配
3.#编译 re_telephone = re.compile(r'^(\d{3})-(\d{3,8})$')
4 正则表达式非常强大，要在短短的一节里讲完是不可能的。要讲清楚正则的所有内容，可以写一本厚厚的书了。如果你经常遇到正则表达式的问题，你可能需要一本正则表达式的参考书