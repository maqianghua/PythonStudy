模块：
1. 在Python中，一个.py文件就称之为一个模块（Module）
2. 引入了包以后，只要顶层的包名不与别人冲突，那所有模块都不会与别人冲突
3. 引入了包以后，只要顶层的包名不与别人冲突，那所有模块都不会与别人冲突
4. __init__.py可以是空文件，也可以有Python代码，因为__init__.py本身就是一个模块，而它的模块名就是mycompany
5. 自己创建模块时要注意命名，不能和Python自带的模块名称冲突。例如，系统自带了sys模块，自己的模块就不可命名为sys.py，否则将无法导入系统自带的sys模块
6. 模块是一组Python代码的集合，可以使用其他模块，也可以被其他模块使用
7. 创建自己的模块时，要注意：
模块名要遵循Python变量命名规范，不要使用中文、特殊字符；
模块名不要和系统模块名冲突，最好先查看系统是否已存在该模块，检查方法是在Python交互环境执行import abc，若成功则说明系统存在此模块
模块_使用模块
1. Python本身就内置了很多非常有用的模块，只要安装完毕，这些模块就可以立刻使用
2. Python解释器把一个特殊变量__name__置为__main__，而如果在其他地方导入该hello模块时，if判断将失败
3. 作用域：
	3.1 类似__xxx__这样的变量是特殊变量，可以被直接引用，但是有特殊用途，比如上面的__author__，__name__就是特殊变量，hello模块定义的文档注释也可以用特殊变量__doc__访问，我们自己的变量一般不要用这种变量名
	3.2 在一个模块中，我们可能会定义很多函数和变量，但有的函数和变量我们希望给别人使用，有的函数和变量我们希望仅仅在模块内部使用。在Python中，是通过_前缀来实现的2 
	3.3 类似_xxx和__xxx这样的函数或变量就是非公开的（private），不应该被直接引用，比如_abc，__abc等
	3.4 外部不需要引用的函数全部定义成private，只有外部需要引用的函数才定义为public
模块-安装第三方模块
1. 在Python中，安装第三方模块，是通过包管理工具pip完成的；如果你正在使用Mac或Linux，安装pip本身这个步骤就可以跳过了
2. 一般来说，第三方库都会在Python官方的pypi.python.org网站注册，要安装一个第三方库，必须先知道该库的名称，可以在官网或者pypi上搜索，比如Pillow的名称叫Pillow，因此，安装Pillow的命令就是：pip install Pillow
3. 在使用Python时，我们经常需要用到很多第三方库，例如，上面提到的Pillow，以及MySQL驱动程序，Web框架Flask，科学计算Numpy等
4. 用pip一个一个安装费时费力，还需要考虑兼容性。我们推荐直接使用Anaconda，这是一个基于Python的数据处理和科学计算平台，它已经内置了许多非常有用的第三方库，我们装上Anaconda，就相当于把数十个第三方模块自动安装好了，非常简单易用
5. 默认情况下，Python解释器会搜索当前目录、所有已安装的内置模块和第三方模块，搜索路径存放在sys模块的path变量中
6. 当我们试图加载一个模块时，Python会在指定的路径下搜索对应的.py文件，如果找不到，就会报错
7. 如果我们要添加自己的搜索目录，有两种方法：
	7.1 一是直接修改sys.path，添加要搜索的目录；（这种方法是在运行时修改，运行结束后失效）
	7.2 第二种方法是设置环境变量PYTHONPATH，该环境变量的内容会被自动添加到模块搜索路径中。设置方式与设置Path环境变量类似。注意只需要添加你自己的搜索路径，Python自己本身的搜索路径不受影响。
	

