函数式编程：
1. 函数就是面向过程的程序设计的基本单元
2. 而函数式编程（请注意多了一个“式”字）——Functional Programming，虽然也可以归结到面向过程的程序设计，但其思想更接近数学计算
3. 汇编语言是最贴近计算机的语言
4. 
	4.1 抽象程度低，执行效率高，比如C语言
	4.2 抽象程度高，执行效率低，比如Lisp语言
5. 函数式编程的一个特点就是，允许把函数本身作为参数传入另一个函数，还允许返回一个函数！

函数式编程_高阶函数
1. 变量可以指向函数
2. 那么函数名是什么呢？函数名其实就是指向函数的变量
3. 当然实际代码绝对不能这么写，这里是为了说明函数名也是变量。要恢复abs函数，请重启Python交互环境。（当函数名被占用的情况下，要重启python交互环境）
4. 由于abs函数实际上是定义在import builtins模块中的，所以要让修改abs变量的指向在其它模块也生效，要用import builtins; builtins.abs = 10
5. 既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数
6. 编写高阶函数，就是让函数的参数能够接收别的函数

函数式编程_高阶函数_map/reduce
1. 我们先看map。map()函数接收两个参数，一个是函数，一个是Iterable，map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回。
2. 把这个list所有数字转为字符串：list(map(str,[1,2,3,4,5,6]))
3. reduce把一个函数作用在一个序列[x1, x2, x3, ...]上，这个函数必须接收两个参数.(实际上map和reduce都是接收2个参数，一个是函数，一个是Iterable)
4. from functools import reduce

函数式编程_高阶函数_filter
1.和map()类似，filter()也接收一个函数和一个序列。和map()不同的是，filter()把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素

函数式编程_高阶函数_sorted
1. sorted()函数也是一个高阶函数，它还可以接收一个key函数来实现自定义的排序，例如按绝对值大小排序:sorted([36,5,-12,9,-21],key=abs)
2. 忽略大小写来比较两个字符串，实际上就是先把字符串都变成大写（或者都变成小写），再比较.
3. 要进行反向排序，不必改动key函数，可以传入第三个参数reverse=True

函数式编程_返回函数
1. 高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回
2. 当lazy_sum返回函数sum时，相关参数和变量都保存在返回的函数中，这种称为“闭包（Closure）”的程序结构拥有极大的威力。
3. 返回闭包时牢记一点：返回函数不要引用任何循环变量，或者后续会发生变化的变量
4. 如果一定要引用循环变量怎么办？方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定到函数参数的值不变
5. 原来在python的函数中和全局同名的变量，如果你有修改变量的值就会变成局部变量，在修改之前对该变量的引用自然就会出现没定义这样的错误了，如果确定要引用全局变量，并且要对它修改，必须加上global关键字

函数式编程_匿名函数
1. 当我们在传入函数时，有些时候，不需要显式地定义函数，直接传入匿名函数更方便
2. 匿名函数：lambda x:x*x，实际上就是def f(x): return x*x
3. 匿名函数有个限制，就是只能有一个表达式，不用写return，返回值就是该表达式的结果
4. 用匿名函数有个好处，因为函数没有名字，不必担心函数名冲突。此外，匿名函数也是一个函数对象，也可以把匿名函数赋值给一个变量，再利用变量来调用该函数
5. 同样，也可以把匿名函数作为返回值返回，


函数式编程_装饰器
1.现在，假设我们要增强now()函数的功能，比如，在函数调用前后自动打印日志，但又不希望修改now()函数的定义，这种在代码运行期间动态增加功能的方式，称之为“装饰器”（Decorator）

函数式编程_偏函数
1. Python的functools模块提供了很多有用的功能，其中一个就是偏函数（Partial function）
2. 创建偏函数时，实际上可以接收函数对象、*args和**kw这3个参数
3. 当函数的参数个数太多，需要简化时，使用functools.partial可以创建一个新的函数，这个新函数可以固定住原函数的部分参数，从而在调用时更简单
