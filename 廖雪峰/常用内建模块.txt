常用內建模块
1 namedtuple是一个函数，它用来创建一个自定义的tuple对象，并且规定了tuple元素的个数，并可以用属性而不是索引来引用tuple的某个元素。
2 deque是为了高效实现插入和删除操作的双向列表，适合用于队列和栈
3 deque除了实现list的append()和pop()外，还支持appendleft()和popleft()，这样就可以非常高效地往头部添加或删除元素
4 除了在Key不存在时返回默认值，defaultdict的其他行为跟dict是完全一样的。
5 注意，OrderedDict的Key会按照插入的顺序排列，不是Key本身排序
6 Counter是一个简单的计数器，例如，统计字符出现的个数
7 如果要让记事本这样的文本处理软件能处理二进制数据，就需要一个二进制到字符串的转换方法。Base64是一种最常见的二进制编码方法
8 如果要编码的二进制数据不是3的倍数，最后会剩下1个或2个字节怎么办？Base64用\x00字节在末尾补足后，再在编码的末尾加上1个或2个=号，表示补了多少字节，解码的时候，会自动去掉
9 去掉=后怎么解码呢？因为Base64是把3个字节变为4个字节，所以，Base64编码的长度永远是4的倍数，因此，需要加上=把Base64字符串的长度变为4的倍数，就可以正常解码了
10 Base64是一种任意二进制到文本字符串的编码方法，常用于在URL、Cookie、网页中传输少量二进制数据
11 准确地讲，Python没有专门处理字节的数据类型。但由于b'str'可以表示字节，所以，字节数组＝二进制str

常用內建模块_struct
1 好在Python提供了一个struct模块来解决bytes和其他二进制数据类型的转换
2 struct的pack函数把任意数据类型变成bytes;pack的第一个参数是处理指令，'>I'的意思是:>表示字节顺序是big-endian，也就是网络序，I表示4字节无符号整数
3 unpack把bytes变成相应的数据类型:根据>IH的说明，后面的bytes依次变为I：4字节无符号整数和H：2字节无符号整数
4 结果显示，b'B'、b'M'说明是Windows位图，位图大小为640x360，颜色数为24

常用內建模块_hashlib
1 Python的hashlib提供了常见的摘要算法，如MD5，SHA1等等
2 什么是摘要算法呢？摘要算法又称哈希算法、散列算法.它通过一个函数，把任意长度的数据转换为一个长度固定的数据串（通常用16进制的字符串表示）。
3 摘要算法之所以能指出数据是否被篡改过，就是因为摘要函数是一个单向函数，计算f(data)很容易，但通过digest反推data却非常困难
4 MD5是最常见的摘要算法，速度很快，生成结果是固定的128 bit字节，通常用一个32位的16进制字符串表示
5 另一种常见的摘要算法是SHA1，调用SHA1和调用MD5完全类似：SHA1的结果是160 bit字节，通常用一个40位的16进制字符串表示。
6 比SHA1更安全的算法是SHA256和SHA512，不过越安全的算法不仅越慢，而且摘要长度更长
7 任何允许用户登录的网站都会存储用户登录的用户名和口令。如何存储用户名和口令呢？方法是存到数据库表中
8 当用户登录时，首先计算用户输入的明文口令的MD5，然后和数据库存储的MD5对比，如果一致，说明口令输入正确，如果不一致，口令肯定错误
9 存储MD5的好处是即使运维人员能访问数据库，也无法获知用户的明文口令

常用內建模块_hmac
1 为了防止黑客通过彩虹表根据哈希值反推原始口令，在计算哈希的时候，不能仅针对原始输入计算，需要增加一个salt来使得相同的输入也能得到不同的哈希，这样，大大增加了黑客破解的难度
2 Hmac算法：Keyed-Hashing for Message Authentication。它通过一个标准算法，在计算哈希的过程中，把key混入计算过程中
3 采用Hmac替代我们自己的salt算法，可以使程序算法更标准化，也更安全。
4 Python自带的hmac模块实现了标准的Hmac算法。我们来看看如何使用hmac实现带key的哈希

常用內建模块_itertools
1 我们看看itertools提供的几个“无限”迭代器
2 无限序列虽然可以无限迭代下去，但是通常我们会通过takewhile()等函数根据条件判断来截取出一个有限的序列
3 chain()可以把一组迭代对象串联起来，形成一个更大的迭代器 
4 groupby()把迭代器中相邻的重复元素挑出来放在一起
5 实际上挑选规则是通过函数完成的，只要作用于函数的两个元素返回的值相等，这两个元素就被认为是在一组的，而函数返回值作为组的key。如果我们要忽略大小写分组，就可以让元素'A'和'a'都返回相同的key
6 实际上挑选规则是通过函数完成的，只要作用于函数的两个元素返回的值相等，这两个元素就被认为是在一组的，而函数返回值作为组的key。如果我们要忽略大小写分组，就可以让元素'A'和'a'都返回相同的key：

常用內建模块_contectlib
1 在Python中，读写文件这样的资源要特别注意，必须在使用完毕后正确关闭它们。正确关闭文件资源的一个方法是使用try...finally：
2 实现上下文管理是通过__enter__和__exit__这两个方法实现的
3 @contextmanager这个decorator接受一个generator，用yield语句把with ... as var把变量输出出去，然后，with语句就可以正常地工作了
4 如果一个对象没有实现上下文，我们就不能把它用于with语句。这个时候，可以用closing()来把该对象变为上下文对象。例如，用with语句使用urlopen()
5 closing也是一个经过@contextmanager装饰的generator，这个generator编写起来其实非常简单：它的作用就是把任意对象变为上下文对象，并支持with语句
6 @contextlib还有一些其他decorator，便于我们编写更简洁的代码。

常用內建模块_urllib
1 urllib的request模块可以非常方便地抓取URL内容，也就是发送一个GET请求到指定的页面，然后返回HTTP的响应
2 如果我们要想模拟浏览器发送GET请求，就需要使用Request对象，通过往Request对象添加HTTP头，我们就可以把请求伪装成浏览器。例如，模拟iPhone 6去请求豆瓣首页
3 如果要以POST发送一个请求，只需要把参数data以bytes形式传入
4 如果还需要更复杂的控制，比如通过一个Proxy去访问网站，我们需要利用ProxyHandler来处理，示例代码如下
5 urllib提供的功能就是利用程序去执行各种HTTP请求。如果要模拟浏览器完成特定功能，需要把请求伪装成浏览器。伪装的方法是先监控浏览器发出的请求，再根据浏览器的请求头来伪装，User-Agent头就是用来标识浏览器的

常用內建模块_XML
1 XML虽然比JSON复杂，在Web中应用也不如以前多了，不过仍有很多地方在用，所以，有必要了解如何操作XML
2 操作XML有两种方法：DOM和SAX。DOM会把整个XML读入内存，解析为树，因此占用内存大，解析慢，优点是可以任意遍历树的节点。SAX是流模式，边读边解析，占用内存小，解析快，缺点是我们需要自己处理事件
3 在Python中使用SAX解析XML非常简洁，通常我们关心的事件是start_element，end_element和char_data，准备好这3个函数，然后就可以解析xml了
4 举个例子，当SAX解析器读到一个节点时：会产生3格式件：1.start_element事件，再读取<a href="/">时；2.char_data事件，在读取python时3.end_element事件，在读取</a>时
5 除了解析XML外，如何生成XML呢？99%的情况下需要生成的XML结构都是非常简单的，因此，最简单也是最有效的生成XML的方法是拼接字符串
6 如果要生成复杂的XML呢？建议你不要用XML，改成JSON。

常用內建模块_HTMLParser
1 如果我们要编写一个搜索引擎，第一步是用爬虫把目标网站的页面抓下来，第二步就是解析该HTML页面，看看里面的内容到底是新闻、图片还是视频
2 HTML本质上是XML的子集，但是HTML的语法没有XML那么严格，所以不能用标准的DOM或SAX来解析HTML
3 feed()方法可以多次调用，也就是不一定一次把整个HTML字符串都塞进去，可以一部分一部分塞进去
4 特殊字符有两种，一种是英文表示的&nbsp;，一种是数字表示的&#1234;，这两种字符都可以通过Parser解析出来
5 利用HTMLParser，可以把网页中的文本、图像等解析出来







